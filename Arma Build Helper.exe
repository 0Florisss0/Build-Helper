import tkinter as tk
from tkinter import scrolledtext
import keyboard
import threading
import time

class FBotGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("F Hold Bot v2 - @ReforgerClips")
        self.root.geometry("500x420")
        self.root.resizable(False, False)

        # Bot state
        self.running = False
        self.f_pressed_time = 0
        self.f_hold_active = False
        self.toggle_key = "insert"  # default
        self.listening_for_key = False

        tk.Label(root, text="F Hold Bot v2", font=("Arial", 16, "bold")).pack(pady=5)
        tk.Label(root, text="@ReforgerClips", font=("Arial", 10), fg="gray").pack()

        # Info panel
        info = (
            "Instructions:\n"
            "- Double-tap F → starts hold after 0.5s\n"
            "- Hold continues until ANY other key is pressed\n"
            "- Mouse movements are allowed\n"
            "- Program can be toggled on/off with your chosen key"
        )
        tk.Label(root, text=info, justify="left").pack(pady=5)

        # Toggle keybind setting
        frame = tk.Frame(root)
        frame.pack(pady=5)
        tk.Label(frame, text="Toggle key:").pack(side="left")
        self.toggle_entry = tk.Entry(frame, width=15)
        self.toggle_entry.insert(0, self.toggle_key)
        self.toggle_entry.pack(side="left", padx=5)
        tk.Button(frame, text="Set", command=self.wait_for_key).pack(side="left")

        # Log panel
        tk.Label(root, text="Log:").pack()
        self.log_area = scrolledtext.ScrolledText(root, height=10, width=58, state="disabled")
        self.log_area.pack(pady=5)

        # Start listener thread
        threading.Thread(target=self.listener, daemon=True).start()

    def wait_for_key(self):
        self.listening_for_key = True
        self.log("Press a key to set as toggle...")

        def set_key(e):
            if self.listening_for_key:
                self.toggle_key = e.name.lower()
                self.toggle_entry.delete(0, tk.END)
                self.toggle_entry.insert(0, self.toggle_key)
                self.log(f"Toggle key set to: {self.toggle_key.upper()}")
                self.listening_for_key = False
                keyboard.unhook(self.key_hook)  # use the stored hook id

        # store the hook so we can remove it later
        self.key_hook = keyboard.on_press(set_key)


    def log(self, message):
        self.log_area.config(state="normal")
        self.log_area.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {message}\n")
        self.log_area.yview(tk.END)
        self.log_area.config(state="disabled")

    def listener(self):
        while True:
            if keyboard.is_pressed(self.toggle_key):
                self.running = not self.running
                self.log(f"Bot {'started' if self.running else 'stopped'}")
                time.sleep(0.5)  # debounce

            if not self.running:
                time.sleep(0.05)
                continue

            # Detect F double tap
            if keyboard.is_pressed("f"):
                now = time.time()
                if now - self.f_pressed_time < 0.5:  # double tap detected
                    self.log("Double tap detected → holding F in 0.5s")
                    time.sleep(0.5)
                    if self.running:  # still running?
                        self.start_f_hold()
                self.f_pressed_time = now

            # If any other key pressed, release F
            if self.f_hold_active:
                for k in keyboard._pressed_events.copy().keys():
                    if k != keyboard.key_to_scan_codes("f")[0]:
                        self.stop_f_hold()
                        self.log("Released F because another key was pressed")
                        break

            time.sleep(0.05)

    def start_f_hold(self):
        if not self.f_hold_active:
            keyboard.press("f")
            self.f_hold_active = True
            self.log("Started holding F")

    def stop_f_hold(self):
        if self.f_hold_active:
            keyboard.release("f")
            self.f_hold_active = False
            self.log("Stopped holding F")

if __name__ == "__main__":
    root = tk.Tk()
    app = FBotGUI(root)
    root.mainloop()

